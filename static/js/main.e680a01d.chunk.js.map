{"version":3,"sources":["components/Titles/Title.js","components/Form/Form.js","components/Weather/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","Component","Form","className","onSubmit","this","props","getWeather","data-toggle","data-target","aria-expanded","aria-controls","type","name","placeholder","Weather","id","city","country","temperature","temperatureHigh","temperatureLow","humidity","description","error","API_KEY","App","state","undefined","lat","lon","icon","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","temp","temp_max","temp_min","coord","sys","weather","stop","Titles_Title","components_Form_Form","components_Weather_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e680a01d.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Title.css';\r\n\r\nclass Titles extends Component{\r\n  render(){\r\n    return (\r\n      <div>\r\n        <h1>Weather Finder</h1>\r\n\r\n      </div>\r\n\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Titles;\r\n","import React, {Component} from 'react';\r\nimport './Form.css';\r\n\r\nclass Form extends Component{\r\n  render(){\r\n    return (\r\n      <div>\r\n\r\n        <form className=\"form-group\"\r\n          onSubmit={this.props.getWeather}\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#weathertrig\"\r\n          aria-expanded=\"false\"\r\n          aria-controls=\"weathertrig\">\r\n\r\n\r\n            <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n            <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n\r\n          <div>\r\n            <button className=\"btn btn-primary\">Get Weather</button>\r\n          </div>\r\n\r\n        </form>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n\t<div className=\"weather__info\" id=\"weathertrig\">\r\n\r\n\t {props.city && props.country &&\r\n     <p className=\"weather__key\">\r\n      Location:\r\n\t \t\t<span className=\"weather__value\"> { props.city }, { props.country }</span>\r\n\t \t</p>}\r\n\r\n\t {props.temperature &&\r\n     <p className=\"weather__key\">\r\n      Current Temperature:\r\n\t \t\t<span className=\"weather__value\"> { props.temperature }\t</span> &deg;F\r\n\t \t</p>}\r\n\r\n    {props.temperatureHigh &&\r\n      <p className=\"weather__key\">\r\n      Today's High:\r\n \t \t\t<span className=\"weather__value\"> { props.temperatureHigh }\t</span> &deg;F\r\n \t \t</p>}\r\n\r\n    {props.temperatureLow &&\r\n      <p className=\"weather__key\">\r\n       Today's Low:\r\n \t \t\t<span className=\"weather__value\"> { props.temperatureLow }\t</span> &deg;F\r\n \t \t</p>}\r\n\r\n\t {props.humidity &&\r\n     <p className=\"weather__key\">\r\n      Humidity:\r\n\t \t\t<span className=\"weather__value\"> { props.humidity } </span>\r\n\t \t</p>}\r\n\r\n\t {props.description &&\r\n     <p className=\"weather__key\">\r\n      Conditions:\r\n\t \t\t<span className=\"weather__value\"> { props.description }</span>\r\n\t </p>}\r\n\r\n\t {props.error && <p className=\"weather__error\">{ props.error }</p>}\r\n\r\n\t</div>\r\n);\r\n\r\nexport default Weather;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nimport Titles from './components/Titles/Title';\r\nimport Form from './components/Form/Form';\r\nimport Weather from './components/Weather/Weather';\r\n{/*import Leaflet from './components/Leaflet/Leaflet';\r\nimport LeafletLoad from './components/Leaflet/LeafletLoad';*/}\r\n\r\nconst API_KEY = \"aeb140d98aa91fd182f6d654a271b77f\";\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    temperature: undefined,\r\n    temperatureHigh: undefined,\r\n    temperatureLow: undefined,\r\n    city: undefined,\r\n    lat: undefined,\r\n    lon: undefined,\r\n    country: undefined,\r\n    humidity: undefined,\r\n    description: undefined,\r\n    icon: undefined,\r\n    error: undefined\r\n  }\r\n\r\n  getWeather = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n\r\n\r\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=imperial`);\r\n\r\n    const data = await api_call.json();\r\n\r\n    {/*console.log(data);*/}\r\n\r\n\r\n    if (city && country) {\r\n      this.setState({\r\n        temperature: data.main.temp,\r\n        temperatureHigh: data.main.temp_max,\r\n        temperatureLow: data.main.temp_min,\r\n        city: data.name,\r\n        lat: data.coord.lat,\r\n        lon: data.coord.lon,\r\n        country: data.sys.country,\r\n        humidity: data.main.humidity,\r\n        description: data.weather[0].description,\r\n        icon: data.weather[0].icon,\r\n        error: \"\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        temperature: undefined,\r\n        temperatureHigh: undefined,\r\n        temperatureLow: undefined,\r\n        city: undefined,\r\n        lat:undefined,\r\n        lon:undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        icon: undefined,\r\n        error: \"Please enter the values.\"\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n\r\n        <Titles/>\r\n\r\n        <Form getWeather={this.getWeather}/>\r\n\r\n        <Weather\r\n          temperature={this.state.temperature}\r\n          temperatureHigh={this.state.temperatureHigh}\r\n          temperatureLow={this.state.temperatureLow}\r\n          humidity={this.state.humidity}\r\n          city={this.state.city}\r\n          country={this.state.country}\r\n          description={this.state.description}\r\n          icon={this.state.icon}\r\n          error={this.state.error}/>\r\n\r\n\r\n          {/*<Leaflet\r\n            lat={this.state.lat}\r\n            lon={this.state.lon}/>\r\n          <LeafletLoad/>*/}\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}